openapi: 3.0.3
info:
 title: Library API
 version: 1.0.5
 description: STD22001
servers:
 - url: https://library.com
paths:
 /books:
    get:
      tags:
        - Book
      summary: Get all books with pagination
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Filter books by start date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Filter books by end date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination 
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page 
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Book'
    put:
      tags:
        - Book
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Book'
 /authors:
    get:
      tags:
        - Author
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
    put:
      tags:
          - Author
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Author
      summary: Delete a list of authors
      operationId: deleteAuthors
      parameters:
        - in: query
          name: authorId
          description: Ids of authors to be deleted
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: The list of deleted authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
#TD2 2-a
 /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Book
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the new author to associate with the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: The book author has been updated successfully
#TD2 2-b 
 /books/authors:
    put:
      tags:
        - Book
      summary: Update authors for multiple books
      operationId: updateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
      responses:
        200:
          description: The authors for the specified books have been updated successfully
components:
 schemas:
    #TD2 use heritage
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
        - properties:
            Author:
              $ref: '#/components/schemas/Author'
      
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
  #TD2 create crupdateBook
    crupdateBook : 
      type: object
      properties:
        id:
          type: string
        bookName : 
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date