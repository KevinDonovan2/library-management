openapi: 3.0.3
info:
 title: Library API
 version: 1.0.7
 description: STD22046 and STD22035
servers:
 - url: https://library.com
paths:
 /books:
    get:
      tags:
        - Book
      summary: Get all books with pagination
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'  # Utiliser le composant queryPagination
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Filter books by start date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Filter books by end date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Book'
    put:
      tags:
        - Book
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Book'
 /authors:
    get:
      tags:
        - Author
      summary: Get all authors with pagination
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/pathPagination'  
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
    put:
      tags:
          - Author
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Author
      summary: Delete a list of authors
      operationId: deleteAuthors
      parameters:
        - in: query
          name: authorId
          description: Ids of authors to be deleted
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: The list of deleted authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
 /visitors:
    get:
      tags:
        - Visitor
      summary: Get all visitors
      operationId: getVisitors
      responses:
        200:
          description: The list of visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
#TD2 2-a
 /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Book
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the new author to associate with the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: The book author has been updated successfully
#TD2 2-b 
 /books/authors:
    put:
      tags:
        - Book
      summary: Update authors for multiple books
      operationId: updateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
      responses:
        200:
          description: The authors for the specified books have been updated successfully
 /authors/import:
    post:
      tags:
        - Author
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              description: Fichier Excel (XLSX) pour l'importation d'auteurs
      responses:
        200:
          description: Liste des auteurs importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

 /books/import:
    post:
      tags:
        - Book
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string  
              description: Fichier Excel (XLSX) pour l'importation de livres
      responses:
        200:
          description: Liste des livres importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
 /books/{bookId}/borrow:
    put:
      tags:
        - "Book"
      summary: Borrow a book
      description: Allow a visitor to borrow a book by specifying the book ID.
      operationId: borrowBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to borrow.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowRequest'
      responses:
        200:
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
 /books/{bookId}/return:
    put:
      tags:
        - "books"
      summary: Return a book
      description: Allow a visitor to return a borrowed book by specifying the book ID.
      operationId: returnBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to return.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequest'
      responses:
        200:
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
 /books/borrowed:
    get:
      tags:
        - "books"
      summary: Get borrowed books
      description: Retrieve a list of books currently borrowed by visitors.
      operationId: getBorrowedBooks
      responses:
        200:
          description: List of borrowed books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
 /books/available:
    get:
      tags:
        - "books"
      summary: Get available books
      description: Retrieve a list of books currently available for borrowing.
      operationId: getAvailableBooks
      responses:
        200:
          description: List of available books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
components:
  parameters:
    pathPagination:
      in: query
      name: pathPagination
      description: Object for path pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    queryPagination:
      in: query
      name: queryPagination
      description: Object for query pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
  responses:
        baseResponse:
          description: Réponse de base pour toutes les réponses
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    properties:
                      code:
                        type: integer
                        description: Code de statut
                      message:
                        type: string
                        description: Message
                  body:
                    type: object
                    description: Contenu de la réponse

        successResponse:
          description: Réponse 200 (Success)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 200

        badRequestResponse:
          description: Réponse 400 (Bad Request)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 400

        forbiddenResponse:
          description: Réponse 403 (Forbidden)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 403

        serverErrorResponse:
          description: Réponse 500 (Server Error)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 500
    #TD2 use heritage
  schemas:
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
        - properties:
            Author:
              $ref: '#/components/schemas/Author'
    BorrowRequest:
      type: object
      properties:
        visitorId:
          type: string
        borrowDate:
          type: string
          format: date-time
    ReturnRequest:
      type: object
      properties:
        visitorId:
          type: string
        returnDate:
          type: string
          format: date-time
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Sex:
      type: string
      enum:
        - M
        - F
    Response:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        body:
          type: object
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    BookResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - properties:
            body:
              $ref: '#/components/schemas/Book'
  #TD2 create crupdateBook
    crupdateBook : 
      type: object
      properties:
        id:
          type: string
        bookName : 
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F

    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string