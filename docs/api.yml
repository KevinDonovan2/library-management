openapi: 3.0.3
info:
 title: Library API
 version: 1.3.12
 description: STD22046 and STD22035
servers:
 - url: https://library.com
paths:
 /books:
    get:
      tags:
        - Book
      summary: Get all books with pagination
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'  # Utiliser le composant queryPagination
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Filter books by start date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Filter books by end date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/BookListBody'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Book
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /authors:
    get:
      tags:
        - Author
      summary: Get all authors with pagination
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/pathPagination'  
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
          - Author
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Author
      summary: Delete a list of authors
      operationId: deleteAuthors
      parameters:
        - in: query
          name: authorId
          description: Ids of authors to be deleted
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: The list of deleted authors
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /visitors:
    get:
      tags:
        - Visitor
      summary: Get all visitors
      operationId: getVisitors
      responses:
        200:
          description: The list of visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
#TD2 2-a
 /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Book
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the new author to associate with the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: The book author has been updated successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
#TD2 2-b 
 /books/authors:
    put:
      tags:
        - Book
      summary: Update authors for multiple books
      operationId: updateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
      responses:
        200:
          description: The authors for the specified books have been updated successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /authors/import:
    post:
      tags:
        - Author
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              description: Fichier Excel (XLSX) pour l'importation d'auteurs
      responses:
        200:
          description: Liste des auteurs importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
      - admin: []

 /books/import:
    post:
      tags:
        - Book
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string  
              description: Fichier Excel (XLSX) pour l'importation de livres
      responses:
        200:
          description: Liste des livres importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /books/{bookId}/:
    put:
      tags:
        - "Book"
      summary: Borrow a book
      description: Allow a visitor to borrow a book by specifying the book ID.
      operationId: borrowBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to borrow.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowRequest'
      security:
        - admin: []
      responses:
        200:
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /books/{bookId}/return:
    put:
      tags:
        - "Book"
      summary: Return a book
      description: Allow a visitor to return a borrowed book by specifying the book ID.
      operationId: returnBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to return.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequest'
      security:
        - admin: []
      responses:
        200:
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /books/borrowed:
    get:
      tags:
        - "Book"
      summary: Get borrowed books
      description: Retrieve a list of books currently borrowed by visitors.
      operationId: getBorrowedBooks
      responses:
        200:
          description: List of borrowed books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListBody'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /books/available:
    get:
      security:
        - public: []
      tags:
        - "Book"
      summary: Get available books
      description: Retrieve a list of books currently available for borrowing.
      operationId: getAvailableBooks
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
 /visitors/{visitorId}/activities:
    get:
      tags:
        - "Visitor"
      summary: Get visitor activities
      description: Retrieve the borrowing and returning activities of a visitor within a specified period.
      operationId: getVisitorActivities
      parameters:
        - name: visitorId
          in: path
          description: The ID of the visitor.
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date for the activity period (ISO 8601 format).
          required: true
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          description: End date for the activity period (ISO 8601 format).
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: List of visitor activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  parameters:
    pathPagination:
      in: query
      name: pathPagination
      description: Object for path pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    queryPagination:
      in: query
      name: queryPagination
      description: Object for query pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    #TD2 use heritage
  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    500:
      description: ServerErrorResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  schemas:
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    BorrowRequest:
      type: object
      properties:
        visitorId:
          type: string
        borrowDate:
          type: string
          format: date-time
    ReturnRequest:
      type: object
      properties:
        visitorId:
          type: string
        returnDate:
          type: string
          format: date-time
    ActivityResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseStatus'
        - properties:
            body:
              type: object
              properties:
                borrowedBooks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Book'
                returnedBooks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Book'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Sex:
      type: string
      enum:
        - M
        - F
    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: { }
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: { }
    ServerErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: ServerErrorResponse
        body: { }
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/Author'
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
  #TD2 create crupdateBook
    crupdateBook : 
      type: object
      properties:
        id:
          type: string
        bookName : 
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    ImportBook:
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/ImportBookExcel'
            - $ref: '#/components/schemas/ImportBookJSON'
    ImportBookExcel:
      type: string
      format: binary
      properties:
        file:
          type: string
    ImportBookJSON:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
        idAuthor:
          type: string
    ImportAuthor:
      type: string
      format: binary
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/ImportAuthorExcel'
            - $ref: '#/components/schemas/ImportAuthorJSON'
    ImportAuthorExcel:
      type: object
      properties:
        file:
          type: string
    ImportAuthorJSON:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
  securitySchemes:
    public:
      type: apiKey
      name: Authorization
      in: header
    admin:
      type: apiKey
      name: Authorization
      in: header
      description: API key for administrator access